#!/usr/bin/env php
<?php

$json_path = "./saves.json";
$expenses_data = [];

enum Commands: string
{
    case Add = "add";
    case Delete = "delete";
    case List = "list";
    case Summary = "summary";
}

class Expense implements JsonSerializable
{
    public int $id;
    private string $date;
    private string $description;
    private int $amount;

    public function __construct(int $id, string $description, int $amount)
    {
        $this->id = $id;
        $this->date = date("Y-m-d");
        $this->description = $description;
        $this->amount = $amount;

    }

    public function jsonSerialize(): array
    {
        return ["id" => $this->id, "date" => $this->date, "description" => $this->description, "amount" => $this->amount];
    }
    /**
     * @param array<int,mixed> $data
     */
    public static function jsonDeserialize(array $data): self
    {
        return new self($data["id"], $data["description"], $data["amount"]);
    }

    /**
     * Calculate the total amount of expenses.
     * @param array $arr
     * @return int
     */
    public static function summary(array $arr, int $month=-1): int
  {
      $date = fn(array $arr) => new DateTime($arr["date"])->format("m");
      #add to specofy the month
      $total_m = 0;
      foreach ($arr as $value) {
        if ($month > 0){
            if ($month == $date($value)) {$total_m+=$value["amount"];}
            continue;
      } else {
          $total_m+=$value["amount"];
        }
      }

      return $total_m;
  }

  /**
   * Delete an expense from the array.
   * @param int $index
   * @param array &$arr
   * @param array<int,mixed> $arr
   */
  public static function delete(int $index, array &$arr) : void {
    if (!empty($index) and !empty($arr))
    {
        unset($arr[$index]);
    }
    elseif ($index == 0 and !empty($arr))
    {
        unset($arr[0]);
    }
    else
    {
        echo "index err" . PHP_EOL;
    }

    # Update id
    $index = 0;
    foreach ($arr as $key => &$value) {
        $value["id"] = $index++;
    }
  }


  /**
   * List all expenses in the tracker.
   * @param array $arr
   */
  public static function list(array $arr) : void {
    # Improve it
    # var_dump($arr);
    $output =  "# ID Date      Description Amount" . PHP_EOL;
    echo $output;

    foreach ($arr as $arr_search) {
        echo "# ";
        foreach ($arr_search as $key => $value) {
          $spacing = str_repeat(" ", (strlen($key) > strlen($value))
                                ? strlen($key) - strlen($value)
                                : 2);
          echo $value . $spacing;
      }
      echo PHP_EOL;
    }
    echo PHP_EOL;
  }

  /**
   * Add a new expense to the tracker.
   *
   * @param array &$json_data
   * @param array $arr
   * @param mixed $json_data
   */
  public static function add(&$json_data, array $arr) : void {
      $json_data[] = $arr;

      echo "# Expense added successfully (ID: " . $arr["id"] . ")";
  }

  /**
   * Initialize the expense tracker with data from a JSON file.
   *
   * @param string $file_path
   * @param array &$jsonSerial
   * @param mixed $json_dt
   */
  public static function init(string $file_path, &$json_dt) : void {
      if (file_exists($file_path)) {
      $jsonSerial = json_decode(file_get_contents($file_path), true);
      foreach ($jsonSerial as $value) {
        $json_dt[] = $value;
      }
    } else {
      $json_dt = [];
    }

  }

}

// $ expense-tracker add --description "Lunch" --amount 20
// # Expense added successfully (ID: 1)

// $ expense-tracker add --description "Dinner" --amount 10
// # Expense added successfully (ID: 2)

// $ expense-tracker list
// # ID  Date       Description  Amount
// # 1   2024-08-06  Lunch        $20
// # 2   2024-08-06  Dinner       $10

// $ expense-tracker summary
// # Total expenses: $30

// $ expense-tracker delete --id 2
// # Expense deleted successfully

// $ expense-tracker summary
// # Total expenses: $20

// $ expense-tracker summary --month 8
// # Total expenses for August: $20

function command_handler($user_input, &$json_data) {
    if (!isset($user_input[1])) {
        $user_input[] = "Void";
    }

    switch ($user_input[1]) {
      case Commands::Add->value:
        if ($user_input[2] == "--description" && $user_input[4] == "--amount") {
            $json_data[] = new Expense(count($json_data), $user_input[3], $user_input[5])->jsonSerialize();
        } else {
            die("Unexpected arguments");
        }
      break;
      case Commands::Delete->value:
        if ($user_input[2] == "--id") {
            if (isset($user_input[3])) {
                Expense::delete($user_input[3], $json_data);
            } else {
                die("Invalid ID");
            }
        } else {
            die("Unexpected arguments");
        }
        break;
      case Commands::Summary->value:
        if ($user_input[1] == "summary") {
            if (isset($user_input[2]) && $user_input[2] == "--month") {
                if (isset($user_input[3])) {
                    echo "Total expenses for month " . $user_input[3] . ": " . Expense::summary($json_data, $user_input[3]) . PHP_EOL;
                } else {
                    die("invalid month");
                }
            } else {
                echo "Total expenses: " . Expense::summary($json_data) . PHP_EOL;
            }
        }
        break;
      case Commands::List->value:
            echo Expense::list($json_data) . PHP_EOL;
        break;
        case "--example":
            echo "Example usage:\n";
            echo "  $ expense-tracker add --description 'Groceries' --amount 50\n";
            echo "  $ expense-tracker delete --id 2\n";
            echo "  $ expense-tracker summary\n";
            echo "  $ expense-tracker summary --month 8\n";
            echo "  $ expense-tracker list\n";
        break;
      default:
          echo "Try expense-tracker --example" . PHP_EOL;
        break;
      }
}


function main() {
  global $argv, $json_path, $expenses_data;

  Expense::init($json_path, $expenses_data);
  command_handler($argv, $expenses_data);

  file_put_contents($json_path, json_encode($expenses_data, JSON_PRETTY_PRINT));
} main();
